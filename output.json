{
    "project": "E:\\workspace\\vue-project3",
    "files": [
        {
            "path": "env.d.ts",
            "type": "file",
            "content": "/// <reference types=\"vite/client\" />\n"
        },
        {
            "path": "index.html",
            "type": "file",
            "content": "<!DOCTYPE html>\n<html lang=\"\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <link rel=\"icon\" href=\"/favicon.ico\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Vite App</title>\n  </head>\n  <body>\n    <div id=\"app\"></div>\n    <script type=\"module\" src=\"/src/main.ts\"></script>\n  </body>\n</html>\n"
        },
        {
            "path": "package.json",
            "type": "file",
            "content": "{\n  \"name\": \"vue-project3\",\n  \"version\": \"0.0.0\",\n  \"private\": true,\n  \"type\": \"module\",\n  \"scripts\": {\n    \"dev\": \"vite\",\n    \"build\": \"run-p type-check \\\"build-only {@}\\\" --\",\n    \"preview\": \"vite preview\",\n    \"build-only\": \"vite build\",\n    \"type-check\": \"vue-tsc --build --force\"\n  },\n  \"dependencies\": {\n    \"axios\": \"^1.7.7\",\n    \"element-plus\": \"^2.8.8\",\n    \"pinia\": \"^2.2.6\",\n    \"vue\": \"^3.5.12\",\n    \"vue-router\": \"^4.4.5\"\n  },\n  \"devDependencies\": {\n    \"@tsconfig/node22\": \"^22.0.0\",\n    \"@types/node\": \"^22.9.0\",\n    \"@vitejs/plugin-vue\": \"^5.1.4\",\n    \"@vue/tsconfig\": \"^0.5.1\",\n    \"npm-run-all2\": \"^7.0.1\",\n    \"typescript\": \"~5.6.3\",\n    \"vite\": \"^5.4.10\",\n    \"vite-plugin-vue-devtools\": \"^7.5.4\",\n    \"vue-tsc\": \"^2.1.10\"\n  }\n}\n"
        },
        {
            "path": "README.md",
            "type": "file",
            "content": "# vue-project3\n\nThis template should help get you started developing with Vue 3 in Vite.\n\n## Recommended IDE Setup\n\n[VSCode](https://code.visualstudio.com/) + [Volar](https://marketplace.visualstudio.com/items?itemName=Vue.volar) (and disable Vetur).\n\n## Type Support for `.vue` Imports in TS\n\nTypeScript cannot handle type information for `.vue` imports by default, so we replace the `tsc` CLI with `vue-tsc` for type checking. In editors, we need [Volar](https://marketplace.visualstudio.com/items?itemName=Vue.volar) to make the TypeScript language service aware of `.vue` types.\n\n## Customize configuration\n\nSee [Vite Configuration Reference](https://vite.dev/config/).\n\n## Project Setup\n\n```sh\nnpm install\n```\n\n### Compile and Hot-Reload for Development\n\n```sh\nnpm run dev\n```\n\n### Type-Check, Compile and Minify for Production\n\n```sh\nnpm run build\n```\n"
        },
        {
            "path": "tsconfig.app.json",
            "type": "file",
            "content": "{\n  \"extends\": \"@vue/tsconfig/tsconfig.dom.json\",\n  \"include\": [\"env.d.ts\", \"src/**/*\", \"src/**/*.vue\"],\n  \"exclude\": [\"src/**/__tests__/*\"],\n  \"compilerOptions\": {\n    \"composite\": true,\n    \"noImplicitAny\": false, //允许隐式声明 any 类型,暂时不了解什么意思，现阶段先关闭，不关闭也可以运行，但是有报错.很奇怪呀，比如只有    component: () => import(\"@@/ATM/MainAtm.vue\"),，代码里的@@/ATM/MainAtm.vue报错，但是其他类似的就不报错\n    \"tsBuildInfoFile\": \"./node_modules/.tmp/tsconfig.app.tsbuildinfo\",\n\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@/*\": [\"./src/*\"]\n    }\n  }\n}\n"
        },
        {
            "path": "tsconfig.json",
            "type": "file",
            "content": "{\n  \"files\": [],\n  \"references\": [\n    {\n      \"path\": \"./tsconfig.node.json\"\n    },\n    {\n      \"path\": \"./tsconfig.app.json\"\n    }\n  ],\n\n  \"compilerOptions\": {\n    // ...\n    \"types\": [\"element-plus/global\"]\n  },\n  \n  \n}\n"
        },
        {
            "path": "tsconfig.node.json",
            "type": "file",
            "content": "{\n  \"extends\": \"@tsconfig/node22/tsconfig.json\",\n  \"include\": [\n    \"vite.config.*\",\n    \"vitest.config.*\",\n    \"cypress.config.*\",\n    \"nightwatch.conf.*\",\n    \"playwright.config.*\"\n  ],\n  \"compilerOptions\": {\n    \"composite\": true,\n    \"noEmit\": true,\n    \"tsBuildInfoFile\": \"./node_modules/.tmp/tsconfig.node.tsbuildinfo\",\n\n    \"module\": \"ESNext\",\n    \"moduleResolution\": \"Bundler\",\n    \"types\": [\"node\"]\n  }\n}\n"
        },
        {
            "path": "vite.config.ts",
            "type": "file",
            "content": "import { fileURLToPath, URL } from 'node:url'\n\nimport { defineConfig } from 'vite'\nimport vue from '@vitejs/plugin-vue'\n\n// https://vite.dev/config/\nexport default defineConfig({\n  plugins: [vue(),],\n  resolve: {\n    extensions: ['.mjs', '.js', '.ts', '.jsx', '.tsx', '.json', '.vue'],\n    alias: {\n      '@': fileURLToPath(new URL('./src', import.meta.url))\n    }\n  }\n})\n"
        },
        {
            "path": ".vscode\\extensions.json",
            "type": "file",
            "content": "{\n  \"recommendations\": [\"Vue.volar\"]\n}\n"
        },
        {
            "path": ".vscode\\settings.json",
            "type": "file",
            "content": "{\n  \"explorer.fileNesting.enabled\": true,\n  \"explorer.fileNesting.patterns\": {\n    \"tsconfig.json\": \"tsconfig.*.json, env.d.ts\",\n    \"vite.config.*\": \"jsconfig*, vitest.config.*, cypress.config.*, playwright.config.*\",\n    \"package.json\": \"package-lock.json, pnpm*, .yarnrc*, yarn*, .eslint*, eslint*, .prettier*, prettier*, .editorconfig\"\n  }\n}\n"
        },
        {
            "path": ".vscode",
            "type": "directory"
        },
        {
            "path": "public\\favicon.ico",
            "type": "file",
            "content": "[非文本文件内容未包含]"
        },
        {
            "path": "public",
            "type": "directory"
        },
        {
            "path": "src\\App.vue",
            "type": "file",
            "content": "<!-- src/App.vue -->\n<template>\n  <div class=\"nav-container\">\n    <div class=\"nav-box\">\n      <router-link class=\"nav-link\" to=\"/atm\">ATM</router-link>\n      <router-link class=\"nav-link\" :to=\"{name:'BankOnline'}\">BankOnline</router-link>\n    </div>\n  </div>\n\n  <!-- 路由视图 -->\n  <div class=\"content-container\">\n    <router-view />\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\n\n</script>\n\n<style>\n/* 全局样式 */\nbody {\n  margin: 0;\n  font-family: 'Helvetica Neue', Arial, sans-serif;\n  background-color: #e6f7ff; /* 浅蓝色背景 */\n  color: #333; /* 深灰色字体 */\n}\n\n/* 导航容器 */\n.nav-container {\n  position: absolute;\n  top: 0;\n  right: 0;\n  padding: 20px;\n}\n\n/* 导航链接盒子 */\n.nav-box {\n  display: flex;\n  gap: 20px;\n  padding: 15px;\n  background-color: #f9f9f9; /* 浅灰色背景 */\n  border: 1px solid #dcdcdc; /* 浅灰色边框 */\n  border-radius: 8px;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* 阴影效果 */\n}\n\n/* 导航链接样式 */\n.nav-link {\n  text-decoration: none;\n  color: #007bff; /* 浅蓝色文字 */\n  font-size: 18px;\n  font-weight: bold;\n  padding: 10px 15px;\n  border-radius: 5px;\n  transition: background-color 0.3s, color 0.3s;\n}\n\n.nav-link:hover {\n  background-color: #007bff; /* 鼠标悬停背景颜色 */\n  color: #fff; /* 鼠标悬停文字颜色 */\n}\n\n\n</style>\n"
        },
        {
            "path": "src\\main.ts",
            "type": "file",
            "content": "// src/main.ts\nimport { createApp } from 'vue';\nimport App from './App.vue';\nimport router from './router';\nimport { createPinia } from 'pinia';\nimport ElementPlus from 'element-plus';\nimport 'element-plus/dist/index.css';\n\nconst app = createApp(App);\n\nconst pinia = createPinia();\n\napp.use(router);\napp.use(ElementPlus);\n\napp.use(pinia).mount('#app')"
        },
        {
            "path": "src",
            "type": "directory"
        },
        {
            "path": "src\\assets\\base.css",
            "type": "file",
            "content": "/* color palette from <https://github.com/vuejs/theme> */\n:root {\n  --vt-c-white: #ffffff;\n  --vt-c-white-soft: #f8f8f8;\n  --vt-c-white-mute: #f2f2f2;\n\n  --vt-c-black: #181818;\n  --vt-c-black-soft: #222222;\n  --vt-c-black-mute: #282828;\n\n  --vt-c-indigo: #2c3e50;\n\n  --vt-c-divider-light-1: rgba(60, 60, 60, 0.29);\n  --vt-c-divider-light-2: rgba(60, 60, 60, 0.12);\n  --vt-c-divider-dark-1: rgba(84, 84, 84, 0.65);\n  --vt-c-divider-dark-2: rgba(84, 84, 84, 0.48);\n\n  --vt-c-text-light-1: var(--vt-c-indigo);\n  --vt-c-text-light-2: rgba(60, 60, 60, 0.66);\n  --vt-c-text-dark-1: var(--vt-c-white);\n  --vt-c-text-dark-2: rgba(235, 235, 235, 0.64);\n}\n\n/* semantic color variables for this project */\n:root {\n  --color-background: var(--vt-c-white);\n  --color-background-soft: var(--vt-c-white-soft);\n  --color-background-mute: var(--vt-c-white-mute);\n\n  --color-border: var(--vt-c-divider-light-2);\n  --color-border-hover: var(--vt-c-divider-light-1);\n\n  --color-heading: var(--vt-c-text-light-1);\n  --color-text: var(--vt-c-text-light-1);\n\n  --section-gap: 160px;\n}\n\n@media (prefers-color-scheme: dark) {\n  :root {\n    --color-background: var(--vt-c-black);\n    --color-background-soft: var(--vt-c-black-soft);\n    --color-background-mute: var(--vt-c-black-mute);\n\n    --color-border: var(--vt-c-divider-dark-2);\n    --color-border-hover: var(--vt-c-divider-dark-1);\n\n    --color-heading: var(--vt-c-text-dark-1);\n    --color-text: var(--vt-c-text-dark-2);\n  }\n}\n\n*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  font-weight: normal;\n}\n\nbody {\n  min-height: 100vh;\n  color: var(--color-text);\n  background: var(--color-background);\n  transition:\n    color 0.5s,\n    background-color 0.5s;\n  line-height: 1.6;\n  font-family:\n    Inter,\n    -apple-system,\n    BlinkMacSystemFont,\n    'Segoe UI',\n    Roboto,\n    Oxygen,\n    Ubuntu,\n    Cantarell,\n    'Fira Sans',\n    'Droid Sans',\n    'Helvetica Neue',\n    sans-serif;\n  font-size: 15px;\n  text-rendering: optimizeLegibility;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n"
        },
        {
            "path": "src\\assets\\logo.svg",
            "type": "file",
            "content": "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 261.76 226.69\"><path d=\"M161.096.001l-30.225 52.351L100.647.001H-.005l130.877 226.688L261.749.001z\" fill=\"#41b883\"/><path d=\"M161.096.001l-30.225 52.351L100.647.001H52.346l78.526 136.01L209.398.001z\" fill=\"#34495e\"/></svg>\n"
        },
        {
            "path": "src\\assets\\main.css",
            "type": "file",
            "content": "@import './base.css';\n\n#app {\n  max-width: 1280px;\n  margin: 0 auto;\n  padding: 2rem;\n  font-weight: normal;\n}\n\na,\n.green {\n  text-decoration: none;\n  color: hsla(160, 100%, 37%, 1);\n  transition: 0.4s;\n  padding: 3px;\n}\n\n@media (hover: hover) {\n  a:hover {\n    background-color: hsla(160, 100%, 37%, 0.2);\n  }\n}\n\n@media (min-width: 1024px) {\n  body {\n    display: flex;\n    place-items: center;\n  }\n\n  #app {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    padding: 0 2rem;\n  }\n}\n"
        },
        {
            "path": "src\\assets",
            "type": "directory"
        },
        {
            "path": "src\\components\\DisplayScreen.vue",
            "type": "file",
            "content": "<!-- src/components/DisplayScreen.vue -->\r\n<template>\r\n    <el-card class=\"display-screen\">\r\n      <h2>{{ title }}</h2>\r\n      <br>\r\n      <div class=\"message\">\r\n        <p>{{ message }}</p>\r\n      </div>\r\n    </el-card>\r\n  </template>\r\n  \r\n  <script lang=\"ts\" setup>\r\n  import { defineProps } from 'vue';\r\n  \r\n  interface Props {\r\n    title: string;\r\n    message?: string;\r\n  }\r\n  \r\n  const props = defineProps<Props>();\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .display-screen {\r\n    width: 300px;\r\n    padding: 20px;\r\n    margin: 20px auto;\r\n    text-align: center;\r\n  }\r\n  h2 {\r\n    margin-bottom: 10px;\r\n  }\r\n\r\n  </style>\r\n  "
        },
        {
            "path": "src\\components\\Header.vue",
            "type": "file",
            "content": "[非文本文件内容未包含]"
        },
        {
            "path": "src\\components\\NotFound.vue",
            "type": "file",
            "content": "<!-- src/components/NotFound.vue -->\r\n<template>\r\n    <div>\r\n      <h1>404 Not Found</h1>\r\n      <p>The page you are looking for does not exist.</p>\r\n      <router-link to=\"/\">Go back to Home</router-link>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  export default {\r\n    name: 'NotFound'\r\n  }\r\n  </script>\r\n  \r\n  <style scoped>\r\n  h1 {\r\n    color: #f00;\r\n  }\r\n  </style>"
        },
        {
            "path": "src\\components\\NumericKeypad.vue",
            "type": "file",
            "content": "<!-- src/components/NumericKeypad.vue -->\r\n<template>\r\n    <div class=\"keypad-container\">\r\n      <el-grid :gutter=\"10\">\r\n        <el-row :gutter=\"10\" type=\"flex\" justify=\"center\"  class=\"keypad-row\">\r\n          <el-col :span=\"8\" v-for=\"key in keys\" :key=\"key\" class=\"keypad-col\"> <!-- 24/8=3列,每行3个键 -->\r\n\r\n            <el-button type=\"primary\" @click=\"handleKey(key)\" style=\"width: 100%\" class=\"keypad-button\">\r\n              {{ key }}\r\n            </el-button>\r\n\r\n          </el-col>\r\n        </el-row>\r\n        <el-row :gutter=\"10\" type=\"flex\" justify=\"center\" style=\"margin-top: 10px;\"  class=\"keypad-row\">\r\n          <el-col :span=\"16\" class=\"keypad-col\">\r\n            <el-button type=\"danger\" @click=\"handleClear\" style=\"width: 100%\" class=\"keypad-button\">\r\n              清除\r\n            </el-button>\r\n          </el-col>\r\n        </el-row>\r\n      </el-grid>\r\n    </div>\r\n  </template>\r\n  \r\n  <script lang=\"ts\" setup>\r\n  import { defineEmits } from 'vue';\r\n  \r\n  const emit = defineEmits(['input', 'clear']);\r\n  \r\n  const keys = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'];\r\n  \r\n  function handleKey(key: string) {\r\n    emit('input', key);\r\n  }\r\n  \r\n  function handleClear() {\r\n    emit('clear');\r\n  }\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .el-row {\r\n    margin-bottom: 10px;\r\n  }\r\n  \r\n  .keypad-container {\r\n  border: 1px solid #b8c6e8; /* Element Plus 默认边框颜色 */\r\n  border-radius: 15px; /* 圆角 */\r\n  padding: 50px; /* 内边距 */\r\n  background-color: #e7d4d410; /* 背景颜色，可根据需求调整 */\r\n  box-shadow: 0 2px 12px rgba(168, 92, 92, 0.1); /* 阴影效果，增加立体感 */\r\n  max-width: 300px; /* 可选：设置最大宽度 */\r\n  margin: 0 auto; /* 居中对齐容器 */\r\n}\r\n.keypad-row {\r\n  margin-bottom: 20px; /* 增加行与行之间的垂直间距 */\r\n}\r\n\r\n.keypad-col {\r\n\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n.keypad-button {\r\n  height: 45px; /* 设置按钮高度，确保一致性 */\r\n}\r\n  </style>\r\n  "
        },
        {
            "path": "src\\components\\Siderbar.vue",
            "type": "file",
            "content": "<script setup lang=\"ts\">\r\nimport { ref, watch } from 'vue';\r\nimport { useBankOnlineStore } from '@/stores/bankonline'; // ä½¿ç”¨ Pinia ç®¡ç�†çŠ¶æ€�\r\nimport { useRouter } from 'vue-router';\r\n\r\nconst isCollapsed = ref(false); // æŠ˜å� çŠ¶æ€�\r\nconst userOnlineStore = useBankOnlineStore(); // ç”¨æˆ·çŠ¶æ€�ç®¡ç�†\r\nconst isLoggedIn = ref(userOnlineStore.isLoggedIn); // ç›‘å�¬ç™»å½•çŠ¶æ€�ï¼Œä½¿ç”¨ ref åŒ…è£…\r\n\r\nconst router = useRouter();\r\n\r\n// è�œå�•é¡¹é…�ç½®\r\nconst menuItems = [\r\n  {\r\n    name: 'Dashboard',\r\n    icon: 'ğŸ“Š',\r\n    path: '/bank-online/dashboard',\r\n  },\r\n  {\r\n    name: 'è´¦æˆ·ç®¡ç�†',\r\n    icon: 'ğŸ‘¤',\r\n    children: [\r\n      { name: 'æˆ‘çš„è´¦æˆ·', path: '/bank-online/account/my-account' },\r\n      { name: 'å¼€æˆ·', path: '/bank-online/account/open' },\r\n      { name: 'å…³é—­è´¦æˆ·', path: '/bank-online/account/close' },\r\n    ],\r\n  },\r\n  {\r\n    name: 'è½¬è´¦æœ�åŠ¡',\r\n    icon: 'ğŸ’¸',\r\n    children: [\r\n      { name: 'è½¬è´¦', path: '/bank-online/transfer' },\r\n      { name: 'äº¤æ˜“è®°å½•', path: '/bank-online/transaction-history' },\r\n    ],\r\n  },\r\n  {\r\n    name: 'è®¾ç½®',\r\n    icon: 'âš™ï¸�',\r\n    children: [\r\n      { name: 'ç”¨æˆ·è®¾ç½®', path: '/bank-online/settings/user' },\r\n      { name: 'å®‰å…¨è®¾ç½®', path: '/bank-online/settings/security' },\r\n    ],\r\n  },\r\n];\r\n\r\n// æŠ˜å� åŠŸèƒ½\r\nfunction toggleSidebar() {\r\n  isCollapsed.value = !isCollapsed.value;\r\n}\r\n\r\n// ç™»å‡ºåŠŸèƒ½\r\nfunction logout() {\r\n  userOnlineStore.setToken(''); // æ¸…é™¤ç™»å½•çŠ¶æ€�\r\n//   userOnlineStore.setUser(null);\r\n  router.push('/login'); // è·³è½¬åˆ°ç™»å½•é¡µé�¢\r\n}\r\n\r\n// åŠ¨æ€�ç›‘å�¬ç™»å½•çŠ¶æ€�\r\nwatch(\r\n  () => userOnlineStore.isLoggedIn, // ç›‘å�¬ Pinia çš„ç™»å½•çŠ¶æ€�\r\n  (newVal) => {\r\n    isLoggedIn.value = newVal; // å�Œæ­¥åˆ°æœ¬åœ° ref\r\n    if (!newVal) {\r\n      router.push('/login'); // å¦‚æ�œæœªç™»å½•ï¼Œè·³è½¬åˆ°ç™»å½•é¡µé�¢\r\n    }\r\n  }\r\n);\r\n\r\n// åŠ¨æ€�ç›‘å�¬æŠ˜å� çŠ¶æ€�ï¼ˆå�¯é€‰ï¼Œæ�§åˆ¶å�°æ‰“å�°å�˜åŒ–ï¼‰\r\nwatch(\r\n  isCollapsed,\r\n  (newVal) => {\r\n    console.log('Sidebar æŠ˜å� çŠ¶æ€�å�˜åŒ–:', newVal ? 'æŠ˜å� ' : 'å±•å¼€');\r\n  }\r\n);\r\n</script>\r\n\r\n<template>\r\n  <aside :class=\"['sidebar', { collapsed: isCollapsed }]\" v-if=\"isLoggedIn\">\r\n    <!-- æŠ˜å� æŒ‰é’® -->\r\n    <button class=\"toggle-btn\" @click=\"toggleSidebar\">\r\n      {{ isCollapsed ? 'â†’' : 'â†�' }}\r\n    </button>\r\n    <!-- è�œå�• -->\r\n    <nav class=\"sidebar-nav\">\r\n      <!-- ä¸€çº§è�œå�•é¡¹ -->\r\n      <div\r\n        v-for=\"item in menuItems\"\r\n        :key=\"item.name\"\r\n        class=\"menu-item\"\r\n      >\r\n        <div class=\"menu-header\" @click=\"item.children ? '' : $router.push(item.path)\">\r\n          <span class=\"icon\">{{ item.icon }}</span>\r\n          <span v-if=\"!isCollapsed\" class=\"text\">{{ item.name }}</span>\r\n        </div>\r\n        <!-- äºŒçº§è�œå�• -->\r\n        <div v-if=\"item.children && !isCollapsed\" class=\"submenu\">\r\n          <router-link\r\n            v-for=\"child in item.children\"\r\n            :key=\"child.path\"\r\n            :to=\"child.path\"\r\n            class=\"submenu-link\"\r\n          >\r\n            {{ child.name }}\r\n          </router-link>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n    <!-- ç™»å‡ºæŒ‰é’® -->\r\n    <button v-if=\"!isCollapsed\" class=\"logout-btn\" @click=\"logout\">\r\n      é€€å‡ºç™»å½•\r\n    </button>\r\n  </aside>\r\n</template>\r\n\r\n<style scoped>\r\n/* ä¾§è¾¹æ �æ•´ä½“æ ·å¼� */\r\n.sidebar {\r\n  position: fixed;\r\n  left: 0;\r\n  top: 0;\r\n  height: 100vh;\r\n  background-color: #e6f7ff; /* æµ…è“�è‰²èƒŒæ™¯ */\r\n  border-right: 1px solid #dcdcdc;\r\n  width: 240px;\r\n  transition: all 0.3s ease;\r\n  padding: 1rem;\r\n  z-index: 100;\r\n}\r\n\r\n.sidebar.collapsed {\r\n  width: 60px;\r\n}\r\n\r\n/* æŠ˜å� æŒ‰é’® */\r\n.toggle-btn {\r\n  position: absolute;\r\n  right: -12px;\r\n  top: 20px;\r\n  background: #007bff;\r\n  border: none;\r\n  width: 24px;\r\n  height: 24px;\r\n  border-radius: 50%;\r\n  color: white;\r\n  cursor: pointer;\r\n  z-index: 101;\r\n}\r\n\r\n/* è�œå�•å®¹å™¨ */\r\n.sidebar-nav {\r\n  margin-top: 2rem;\r\n}\r\n\r\n.menu-item {\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.menu-header {\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 0.8rem 1rem;\r\n  color: #007bff; /* æ·±è“�è‰²æ–‡å­— */\r\n  font-weight: bold;\r\n  cursor: pointer;\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.menu-header:hover {\r\n  background-color: rgba(0, 123, 255, 0.1); /* æµ…è“�è‰²æ‚¬å�œæ•ˆæ�œ */\r\n  border-radius: 6px;\r\n}\r\n\r\n/* äºŒçº§è�œå�• */\r\n.submenu {\r\n  padding-left: 1.5rem;\r\n}\r\n\r\n.submenu-link {\r\n  display: block;\r\n  color: #0056b3; /* æµ…è“�è‰²æ–‡å­— */\r\n  text-decoration: none;\r\n  padding: 0.5rem 0;\r\n  transition: color 0.3s ease;\r\n}\r\n\r\n.submenu-link:hover {\r\n  color: #007bff; /* é¼ æ ‡æ‚¬å�œè“�è‰² */\r\n}\r\n\r\n.icon {\r\n  margin-right: 1rem;\r\n}\r\n\r\n.collapsed .text {\r\n  display: none;\r\n}\r\n\r\n.collapsed .icon {\r\n  margin-right: 0;\r\n}\r\n\r\n/* ç™»å‡ºæŒ‰é’® */\r\n.logout-btn {\r\n  position: absolute;\r\n  bottom: 20px;\r\n  left: 20px;\r\n  background: #f44336;\r\n  color: white;\r\n  border: none;\r\n  padding: 0.5rem 1rem;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n}\r\n\r\n.logout-btn:hover {\r\n  background: #d32f2f;\r\n}\r\n</style>\r\n"
        },
        {
            "path": "src\\components",
            "type": "directory"
        },
        {
            "path": "src\\router\\index.ts",
            "type": "file",
            "content": "//src/router/index.ts\nimport { createRouter, createWebHistory } from \"vue-router\";\nimport type { RouteRecordRaw } from 'vue-router';\nimport { useATMStore } from \"@/stores/atm\";\nimport { useBankOnlineStore } from \"@/stores/bankonline\";\n\nconst atmRoutes: RouteRecordRaw[] = [\n  {\n    path: \"welcome\",\n    name: \"Welcome\",\n    component: () => import(\"@/views/ATM/WelcomePage.vue\"),\n  },\n  {\n    path: \"pin-entry\",\n    name: \"PinEntry\",\n    component: () => import(\"@/views/ATM/PinEntry.vue\"),\n  },\n  {\n    path: \"mainatm\",\n    name: \"MainAtm\",\n    component: () => import(\"@/views/ATM/MainAtm.vue\"),\n    children: [\n      {\n        path: \"\",\n        redirect: \"mainmenu\", // 默认进入主菜单页面\n      },\n      {\n        path: \"mainmenu\",\n        name: \"MainMenu\",\n        component: () => import(\"@/views/ATM/MainMenu.vue\"),\n      },\n      {\n        path: \"deposit\",\n        name: \"Deposit\",\n        component: () => import(\"@/views/ATM/Deposit.vue\"),\n      },\n      {\n        path: \"withdrawal\",\n        name: \"Withdrawal\",\n        component: () => import(\"@/views/ATM/Withdrawal.vue\"),\n      },\n      {\n        path: \"balance-inquiry\",\n        name: \"BalanceInquiry\",\n        component: () => import(\"@/views/ATM/BalanceInquiry.vue\"),\n      },\n      {\n        path: \"transfer\",\n        name: \"Transfer\",\n        component: () => import(\"@/views/ATM/TransferPage.vue\"),\n      },\n      {\n        path: \"transaction-record\",\n        name: \"TransactionRecord\",\n        component: () => import(\"@/views/ATM/TransactionRecord.vue\"),\n      },\n      {\n        path: '/transaction-receipt/:type/:amount/:recipient?',\n        name: \"TransactionReceipt\",\n        component: () => import(\"@/views/ATM/TransactionReceipt.vue\"),\n        props: true,\n\n      },\n      {\n        path: \"exit\",\n        name: \"Exit\",\n        component: () => import(\"@/views/ATM/ExitPage.vue\"),\n      },\n      {\n        path: \"error\",\n        name: \"Error\",\n        component: () => import(\"@/views/ATM/ErrorPage.vue\"),\n      },\n    ],\n  },\n];\n\nconst bankOnlineRoutes: RouteRecordRaw[] = [\n  {\n    path: \"login\",\n    name: \"Login\",\n    component: () => import(\"@/views/BankOnline/LoginPage.vue\"),\n  },\n  {\n    path: \"mainbankonline\",\n    name: \"MainBankOnline\",\n    component: () => import(\"@/views/BankOnline/MainBankOnline.vue\"),\n    children: [\n      {\n        path: \"\",\n        redirect: \"dashboard\", // 默认进入仪表板页面\n      },\n      {\n        path: \"dashboard\",\n        name: \"Dashboard\",\n        component: () => import(\"@/views/BankOnline/Dashboard.vue\"),\n      },\n      {\n        path: \"transactions\",\n        name: \"Transactions\",\n        component: () => import(\"@/views/BankOnline/Transactions.vue\"),\n      },\n      {\n        path: \"settings\",\n        name: \"Settings\",\n        component: () => import(\"@/views/BankOnline/Settings.vue\"),\n      }\n    ]\n  }\n];\n\nconst routes: RouteRecordRaw[] = [\n  // ATM 模块配置\n  {\n    path: \"/atm\",\n    name: \"ATM\",\n    beforeEnter: (to, from, next) => {\n      const atmStore = useATMStore();\n      if (!atmStore.token) {\n        console.log(atmStore.token);\n        // 未登录时只能访问 welcome 和 pin-entry\n        if (to.name !== \"Welcome\" && to.name !== \"PinEntry\") {\n          console.log(\"跳转到welcom\");\n          next(\"/atm/welcome\");\n\n        } else {\n          console.log(\"放行 /atm\");\n          next();\n        }\n      } else {\n        // 恢复到保存的页面\n        if (to.path === \"/atm\") {\n          console.log(\"恢复到保存的页面\");\n          next(atmStore.currentPage || \"/atm/mainatm/mainmenu\");\n        } else {\n          next();  \n        }\n      }\n    },\n    children: atmRoutes,\n  },\n  // BankOnline 模块配置\n  {\n    path: \"/bankonline\",\n    name: \"BankOnline\",\n    beforeEnter: (to, from, next) => {\n      const bankOnlineStore = useBankOnlineStore();\n      if (!bankOnlineStore.token) {\n        // 未登录时只能访问 login\n        if (to.name !== \"Login\") {\n          next({ name: \"Login\" });\n        } else {\n          next();\n        }\n      } else {\n        // 恢复到保存的页面\n        if (to.path === \"/bankonline\") {\n          next(bankOnlineStore.currentPage || \"/dashboard\");\n        } else {\n          next();\n        }\n      }\n    },\n    children: bankOnlineRoutes,\n  },\n  // 默认路由重定向\n  {\n    path: \"/\",\n    redirect: \"/atm/welcome\", // 默认进入 ATM 模块\n  },\n  // 404 页面\n  {\n    path: \"/:pathMatch(.*)*\",\n    name: \"NotFound\",\n    component: () => import(\"@/components/NotFound.vue\"),\n  },\n\n];\n\nconst router = createRouter({\n  history: createWebHistory(),\n  routes,\n});\n\nexport default router;\n"
        },
        {
            "path": "src\\router",
            "type": "directory"
        },
        {
            "path": "src\\stores\\atm.ts",
            "type": "file",
            "content": "//src/stores/atm.ts\r\nimport { defineStore } from \"pinia\";\r\n\r\nexport const useATMStore = defineStore(\"atm\", {\r\n  state: () => ({\r\n    selectedCard: {\r\n      cardNumber: '', \r\n      balance: 0, \r\n    },\r\n\t\r\n    token: null as string | null, \r\n    currentPage: \"/atm/welcome\", \r\n  }),\r\n  \r\n  \r\n  actions: {\r\n    selectCard(card: { cardNumber: string; balance: number }) {\r\n      this.selectedCard = card; \r\n    },\r\n\t\r\n    addBalance(amount: number) {\r\n      this.selectedCard.balance += amount;\r\n    },\r\n    deductBalance(amount: number) {\r\n      if (this.selectedCard.balance >= amount) {\r\n        this.selectedCard.balance -= amount;\r\n      } else {\r\n        throw new Error('余额不足');\r\n      }\r\n    },\r\n  \r\n    setToken(token: string | null) {\r\n      this.token = token;\r\n    },\r\n    clearToken() {\r\n        this.token = null;\r\n        this.selectedCard = {\r\n          cardNumber: '', \r\n          balance: 0,\r\n        }\r\n      },\r\n\t\r\n    setCurrentPage(page: string) {\r\n      this.currentPage = page;\r\n    },\r\n\r\n  },\r\n});"
        },
        {
            "path": "src\\stores\\bankonline.ts",
            "type": "file",
            "content": "// src/stores/bankonline.ts\r\nimport { defineStore } from \"pinia\";\r\n\r\nenum Gender {\r\n  Unknown = 'unknown',\r\n  Male = 'male',\r\n  Female = 'female',\r\n}\r\n\r\nexport const useBankOnlineStore = defineStore(\"bankonline\", {\r\n  state: () => ({\t\r\n    token: null as string | null, \r\n    currentPage: \"/bankonline/login\", \r\n    user: {\r\n      name: '',\r\n      sex: Gender.Unknown, \r\n    },\r\n  }),\r\n    \r\n      \r\n  getters:{\r\n    isLoggedIn:(state)=>!!state.token,\r\n  },\r\n  actions: {\r\n    setToken(token: string | null) {\r\n      this.token = token;\r\n    },\r\n\tclearToken() {\r\n      this.token = null;\r\n\t  this.user = {\r\n\t\tname:'null',\r\n\t\tsex: Gender.Unknown\r\n\t  }\r\n    },\r\n      \r\n    setUser(user: { name: string; sex: Gender  }) {\r\n      this.user = user;\r\n    },\r\n      \r\n    setCurrentPage(page: string) {\r\n      this.currentPage = page;\r\n    },\r\n\t\r\n  },\r\n});\r\n"
        },
        {
            "path": "src\\stores\\counter.ts",
            "type": "file",
            "content": "import { ref, computed } from 'vue'\nimport { defineStore } from 'pinia'\n\nexport const useCounterStore = defineStore('counter', () => {\n  const count = ref(0)\n  const doubleCount = computed(() => count.value * 2)\n  function increment() {\n    count.value++\n  }\n\n  return { count, doubleCount, increment }\n})\n"
        },
        {
            "path": "src\\stores",
            "type": "directory"
        },
        {
            "path": "src\\views",
            "type": "directory"
        },
        {
            "path": "src\\views\\ATM\\BalanceInquiry.vue",
            "type": "file",
            "content": "<!-- src/views/BalanceInquiry.vue -->\r\n<template>\r\n    <div class=\"balance-inquiry\">\r\n      <DisplayScreen title=\"账户余额\" :message=\"`¥${balance}`\" />\r\n      <el-button type=\"primary\" @click=\"backToMenu\" size=\"large\">\r\n        返回主菜单\r\n      </el-button>\r\n    </div>\r\n  </template>\r\n  \r\n  <script lang=\"ts\" setup>\r\n  import { computed } from 'vue';\r\n  import { useATMStore } from '@/stores/atm';\r\n  import { useRouter } from 'vue-router';\r\n  import DisplayScreen from '@/components/DisplayScreen.vue';\r\n  \r\n  const userStore = useATMStore();\r\n  const router = useRouter();\r\n  \r\n  const balance = computed(() => userStore.selectedCard.balance);\r\n  \r\n  function backToMenu() {\r\n    router.push('/atm/mainatm/mainmenu');\r\n  }\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .balance-inquiry {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    height: 100vh;\r\n  }\r\n  .el-button {\r\n    margin-top: 20px;\r\n  }\r\n  </style>\r\n  "
        },
        {
            "path": "src\\views\\ATM\\Deposit.vue",
            "type": "file",
            "content": "<!-- src/views/Deposit.vue -->\r\n<template>\r\n    <div class=\"deposit\">\r\n      <DisplayScreen title=\"存款金额\" :message=\"amount || '请输入存款金额'\" />\r\n      <NumericKeypad @input=\"addAmount\" @clear=\"clearAmount\" />\r\n\r\n      <div style=\"display: flex; align-items: center; gap: 10px;\">\r\n        <el-button\r\n          type=\"success\"\r\n          @click=\"confirmDeposit\"\r\n          :disabled=\"!isValidAmount\"\r\n          size=\"large\"\r\n          style=\"margin-top: 20px;\"\r\n        >\r\n          确认存款\r\n        </el-button>\r\n        <el-button \r\n          type=\"primary\" \r\n          @click=\"backToMenu\" \r\n          size=\"large\"\r\n          style=\"margin-top: 20px;\"\r\n          >\r\n          返回主菜单\r\n        </el-button>\r\n      </div>\r\n\r\n    </div>\r\n  </template>\r\n  \r\n  <script lang=\"ts\" setup>\r\n  import { ref, computed } from 'vue';\r\n  import { useRouter } from 'vue-router';\r\n  import { useATMStore } from '@/stores/atm';\r\n  import DisplayScreen from '@/components/DisplayScreen.vue';\r\n  import NumericKeypad from '@/components/NumericKeypad.vue';\r\n  import { ElButton } from 'element-plus';\r\n  \r\n  const router = useRouter();\r\n  const userStore = useATMStore();\r\n  \r\n  const amount = ref<string>('');\r\n  \r\n  const isValidAmount = computed(() => {\r\n    const num = parseInt(amount.value, 10);\r\n    return !isNaN(num) && num > 0 && num <= 1000000; // 最多存入 100万\r\n  });\r\n  function backToMenu() {\r\n    router.push('/atm/mainatm/mainmenu');\r\n  }\r\n  function addAmount(key: string) {\r\n    if (amount.value.length < 6 && /^\\d+$/.test(amount.value + key)) {\r\n      amount.value += key;\r\n    }\r\n  }\r\n  \r\n  function clearAmount() {\r\n    amount.value = '';\r\n  }\r\n  \r\n  function confirmDeposit() {\r\n    const depositAmount = parseInt(amount.value, 10);\r\n    userStore.addBalance(depositAmount);\r\n    router.push({\r\n      name: 'TransactionReceipt',\r\n      params: { type: 'deposit', amount: depositAmount.toString() },\r\n    });\r\n  }\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .deposit {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    height: 100vh;\r\n  }\r\n  </style>\r\n  "
        },
        {
            "path": "src\\views\\ATM\\ErrorPage.vue",
            "type": "file",
            "content": "<template>\r\n    <div class=\"error-page\">\r\n      <h1>{{ errorTitle }}</h1>\r\n      <p>{{ errorMessage }}</p>\r\n      <el-button type=\"primary\" @click=\"goBack\">返回上一页</el-button>\r\n      <el-button type=\"primary\" @click=\"goHome\">返回首页</el-button>\r\n    </div>\r\n  </template>\r\n  \r\n  <script lang=\"ts\" setup>\r\n  import { ref } from 'vue';\r\n  import { useRouter } from 'vue-router';\r\n  import { ElButton } from 'element-plus';\r\n  \r\n  const router = useRouter();\r\n  \r\n  // 默认错误信息\r\n  const errorTitle = ref('404 页面未找到');\r\n  const errorMessage = ref('您访问的页面不存在，请检查URL或返回首页。');\r\n  \r\n  // 接收父组件传递的错误信息\r\n  const props = defineProps({\r\n    title: {\r\n      type: String,\r\n      default: '404 页面未找到',\r\n    },\r\n    message: {\r\n      type: String,\r\n      default: '您访问的页面不存在，请检查URL或返回首页。',\r\n    },\r\n  });\r\n  \r\n  // 使用父组件传递的错误信息\r\n  errorTitle.value = props.title;\r\n  errorMessage.value = props.message;\r\n  \r\n  function goBack() {\r\n    router.go(-1); // 返回上一页\r\n  }\r\n  \r\n  function goHome() {\r\n    router.push({ name: 'Welcome' }); // 返回首页\r\n  }\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .error-page {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    height: 100vh;\r\n    text-align: center;\r\n    background-color: #f0f2f5;\r\n    padding: 20px;\r\n  }\r\n  \r\n  h1 {\r\n    font-size: 36px;\r\n    color: #333;\r\n    margin-bottom: 20px;\r\n  }\r\n  \r\n  p {\r\n    font-size: 18px;\r\n    color: #666;\r\n    margin-bottom: 30px;\r\n  }\r\n  \r\n  .el-button {\r\n    margin: 10px;\r\n  }\r\n  </style>"
        },
        {
            "path": "src\\views\\ATM\\ExitPage.vue",
            "type": "file",
            "content": "<!-- src/views/ExitPage.vue -->\r\n<template>\r\n    <div class=\"exit-page\">\r\n      <DisplayScreen title=\"感谢使用\" message=\"请取回您的银行卡\" />\r\n      <el-button type=\"primary\" @click=\"restart\" size=\"large\" style=\"margin-top: 20px;\">\r\n        重新开始\r\n      </el-button>\r\n    </div>\r\n  </template>\r\n  \r\n  <script lang=\"ts\" setup>\r\n  import { useRouter } from 'vue-router';\r\n  import DisplayScreen from '@/components/DisplayScreen.vue';\r\n  import { ElButton } from 'element-plus';\r\n  \r\n  const router = useRouter();\r\n  \r\n  function restart() {\r\n    router.push('/');\r\n  }\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .exit-page {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    height: 100vh;\r\n  }\r\n  </style>\r\n  "
        },
        {
            "path": "src\\views\\ATM\\MainAtm.vue",
            "type": "file",
            "content": "<!-- src/views/Atm/MainAtm.vue -->\r\n<template>\r\n  <div>\r\n    <h1>Main ATM</h1>\r\n    <!-- ATM 子路由视图 -->\r\n    <router-view />\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\n// 可加入 ATM 相关逻辑\r\n</script>\r\n\r\n<style scoped>\r\nh1 {\r\n  color: #007bff;\r\n  text-align: center;\r\n  margin-top: 20px;\r\n}\r\n</style>\r\n"
        },
        {
            "path": "src\\views\\ATM\\MainMenu.vue",
            "type": "file",
            "content": "<!-- src/views/ATM/MainMenu.vue -->\r\n<template>\r\n    <div class=\"main-menu\">\r\n      <DisplayScreen title=\"XX银行\" />\r\n      <el-menu :default-active=\"activeMenu\" class=\"menu\" mode=\"horizontal\">\r\n        <el-menu-item index=\"balance\" @click=\"goToBalance\">查询余额</el-menu-item>\r\n        <el-menu-item index=\"withdrawal\" @click=\"goToWithdrawal\">取款</el-menu-item>\r\n        <el-menu-item index=\"deposit\" @click=\"goToDeposit\">存款</el-menu-item>\r\n        <el-menu-item index=\"transfer\" @click=\"goToTransfer\">转账</el-menu-item>\r\n        <el-menu-item index=\"transactionRecord\" @click=\"goToTransactionRecord\">交易记录</el-menu-item>\r\n\r\n        <el-menu-item index=\"exit\" @click=\"exit\">退出</el-menu-item>\r\n      </el-menu>\r\n    </div>\r\n  </template>\r\n  \r\n  <script lang=\"ts\" setup>\r\n  import { ref } from 'vue';\r\n  import { useRouter } from 'vue-router';\r\n  import DisplayScreen from '@/components/DisplayScreen.vue';\r\n  import { ElMenu, ElMenuItem } from 'element-plus';\r\n  \r\n  const router = useRouter();\r\n  const activeMenu = ref<string>('balance');\r\n  \r\n  function goToBalance() {\r\n    router.push('/atm/mainatm/balance-inquiry');\r\n  }\r\n  \r\n  function goToWithdrawal() {\r\n    router.push('/atm/mainatm/withdrawal');\r\n  }\r\n  \r\n  function goToDeposit() {\r\n    router.push('/atm/mainatm/deposit');\r\n  }\r\n  \r\n  function goToTransfer() {\r\n    router.push('/atm/mainatm/transfer');\r\n  }\r\n  function goToTransactionRecord(){\r\n    router.push('/atm/mainatm/transaction-record');\r\n  }\r\n  function exit() {\r\n    router.push('/atm/mainatm/exit');\r\n  }\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .main-menu {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    height: 100vh;\r\n  }\r\n  .menu {\r\n    margin-top: 20px;\r\n  }\r\n  </style>\r\n  "
        },
        {
            "path": "src\\views\\ATM\\PinEntry.vue",
            "type": "file",
            "content": "<!-- src/views/ATM/PinEntry.vue -->\r\n<template>\r\n    <div class=\"pin-entry\">\r\n      <DisplayScreen title=\"请输入 PIN 码\" :message=\"maskedPin\" />\r\n      <NumericKeypad @input=\"addPin\" @clear=\"clearPin\" />\r\n      <el-alert\r\n        v-if=\"error\"\r\n        title=\"PIN 错误，请重试\"\r\n        type=\"error\"\r\n        show-icon\r\n        closable\r\n        @close=\"error = false\"\r\n        style=\"margin-top: 20px;\"\r\n      />\r\n    </div>\r\n  </template>\r\n  \r\n  <script lang=\"ts\" setup>\r\n  import { ref } from 'vue';\r\n  import { computed } from 'vue';\r\n  import { useRouter } from 'vue-router';\r\n  import { useATMStore } from '@/stores/atm'; // 导入用户 store\r\n  import DisplayScreen from '@/components/DisplayScreen.vue';\r\n  import NumericKeypad from '@/components/NumericKeypad.vue';\r\n  \r\n  const router = useRouter();\r\n  const userStore = useATMStore();\r\n  const pin = ref<string>('');\r\n  const error = ref<boolean>(false);\r\n  \r\n  const PIN_LENGTH = 6; //  默认PIN 是 6 位\r\n  \r\n  const maskedPin = computed(() => '*'.repeat(pin.value.length));\r\n  \r\n  function addPin(key: string) {\r\n    if (pin.value.length < PIN_LENGTH) {\r\n      pin.value += key;\r\n      if (pin.value.length === PIN_LENGTH) {\r\n        validatePin();\r\n      }\r\n    }\r\n  }\r\n  \r\n  function clearPin() {\r\n    pin.value = '';\r\n    error.value = false;\r\n  }\r\n  \r\n  function validatePin() {\r\n  // 测试用 PIN 码 123456\r\n  if (pin.value === '123456') {\r\n    // 模拟获取的 token\r\n    const token = 'mocked-token';\r\n    userStore.setToken(token); // 将 token 存储到状态管理中\r\n    router.push('/atm/mainatm/mainmenu');\r\n  } else {\r\n    error.value = true;\r\n    pin.value = '';\r\n  }\r\n    // 这里应调用后端 API 进行 PIN 验证\r\n    // 使用 Axios 模拟验证请求\r\n/*     import('axios').then(({ default: axios }) => {\r\n      axios\r\n        .post('/api/validate-pin', { pin: pin.value })\r\n        .then((response) => {\r\n          const isValid = response.data.valid;\r\n          if (isValid) {\r\n            router.push('/atm/mainatm/main-menu');\r\n          } else {\r\n            error.value = true;\r\n            pin.value = '';\r\n          }\r\n        })\r\n        .catch(() => {\r\n          // 处理请求错误\r\n          error.value = true;\r\n          pin.value = '';\r\n        });\r\n    }); */\r\n  }\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .pin-entry {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    height: 100vh;\r\n  }\r\n  </style>\r\n  "
        },
        {
            "path": "src\\views\\ATM\\TransactionReceipt.vue",
            "type": "file",
            "content": "<!-- src/views/TransactionReceipt.vue -->\r\n<template>\r\n    <div class=\"transaction-receipt\">\r\n      <DisplayScreen :title=\"receiptTitle\" :message=\"receiptMessage\" />\r\n      <el-button type=\"primary\" @click=\"printReceipt\" size=\"large\" style=\"margin-top: 20px;\">\r\n        打印凭证\r\n      </el-button>\r\n      <el-button type=\"success\" @click=\"backToMenu\" size=\"large\" style=\"margin-top: 10px;\">\r\n        返回主菜单\r\n      </el-button>\r\n    </div>\r\n  </template>\r\n  \r\n  <script lang=\"ts\" setup>\r\n  import { computed,onMounted  } from 'vue';\r\n  import { useRoute, useRouter } from 'vue-router';\r\n  import DisplayScreen from '@/components/DisplayScreen.vue';\r\n  import { ElButton, ElMessage } from 'element-plus';\r\n  \r\n  const route = useRoute();\r\n  const router = useRouter();\r\n  // 定义接收的 props\r\n  const props = defineProps<{\r\n    type: string;\r\n    amount: string;\r\n    recipient?: string;\r\n  }>();\r\n  const { type, amount, recipient } = props;\r\n\r\n//直接用route.params\r\n  // const type = route.params.type as string;\r\n  // const amount = route.params.amount as string;\r\n  // const recipient = route.params.recipient as string | undefined;\r\n\r\n// 调试：打印接收到的参数\r\n//   onMounted(() => {\r\n//   console.log('TransactionReceipt Params:', { type, amount, recipient });\r\n// });\r\n  const receiptTitle = computed(() => {\r\n    switch (type) {\r\n      case 'withdrawal':\r\n        return '取款成功';\r\n      case 'deposit':\r\n        return '存款成功';\r\n      case 'transfer':\r\n        return '转账成功';\r\n      default:\r\n        return '交易成功';\r\n    }\r\n  });\r\n  \r\n  const receiptMessage = computed(() => {\r\n    let message = `金额: ¥${amount}\\n感谢使用 AMT机 服务！`;\r\n    if (recipient) {\r\n      message += `\\n收款人账号: ${recipient}`;\r\n    }\r\n    return message;\r\n  });\r\n  \r\n  function printReceipt() {\r\n    // 实现打印逻辑，这里仅模拟\r\n    ElMessage.success('打印凭证功能尚未实现');\r\n  }\r\n  \r\n  function backToMenu() {\r\n    router.push('/atm/mainatm/mainmenu');\r\n  }\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .transaction-receipt {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    height: 100vh;\r\n    white-space: pre-line; /* 保持换行符 */\r\n  }\r\n  </style>\r\n  "
        },
        {
            "path": "src\\views\\ATM\\TransactionRecord.vue",
            "type": "file",
            "content": "<!-- src/views/TransactionRecord.vue -->\r\n<template>\r\n  <div class=\"transaction-history\">\r\n    <div class=\"content-container\">\r\n      <el-card class=\"box-card\">\r\n        <div slot=\"header\" class=\"card-header\">\r\n          <span>交易记录</span>\r\n        </div>\r\n        <el-table\r\n          :data=\"transactions\"\r\n          style=\"width: 100%\"\r\n          :default-sort=\"{ prop: 'tran_time', order: 'descending' }\"\r\n        >\r\n          <el-table-column\r\n            prop=\"tran_id\"\r\n            label=\"交易ID\"\r\n            width=\"100\"\r\n          ></el-table-column>\r\n          <el-table-column\r\n            prop=\"card_no1\"\r\n            label=\"卡号1\"\r\n            width=\"200\"\r\n          ></el-table-column>\r\n          <el-table-column\r\n            prop=\"card_no2\"\r\n            label=\"卡号2\"\r\n            width=\"200\"\r\n            v-if=\"hasCardNo2\"\r\n          ></el-table-column>\r\n          <el-table-column\r\n            prop=\"atm_id\"\r\n            label=\"ATM ID\"\r\n            width=\"120\"\r\n            v-if=\"hasATMId\"\r\n          ></el-table-column>\r\n          <el-table-column\r\n            prop=\"status\"\r\n            label=\"交易类型\"\r\n            width=\"100\"\r\n          >\r\n            <template #default=\"scope\">\r\n              <span>{{ statusMap[scope.row.status] }}</span>\r\n            </template>\r\n          </el-table-column>\r\n          <el-table-column\r\n            prop=\"money\"\r\n            label=\"金额 (¥)\"\r\n            width=\"120\"\r\n            align=\"right\"\r\n          >\r\n            <template #default=\"scope\">\r\n              <span :style=\"{ color: getMoneyColor(scope.row.status) }\">\r\n                {{ scope.row.money.toFixed(2) }}\r\n              </span>\r\n            </template>\r\n          </el-table-column>\r\n          <el-table-column\r\n            prop=\"tran_time\"\r\n            label=\"交易时间\"\r\n            width=\"200\"\r\n          >\r\n            <template #default=\"scope\">\r\n              <span>{{ formatDate(scope.row.tran_time) }}</span>\r\n            </template>\r\n          </el-table-column>\r\n        </el-table>\r\n      </el-card>\r\n      <div class=\"button-container\">\r\n        <el-button \r\n          type=\"primary\" \r\n          @click=\"backToMenu\" \r\n          size=\"large\"\r\n        >\r\n          返回主菜单\r\n        </el-button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n  <script lang=\"ts\" setup>\r\n  // 导入必要的模块和组件\r\n  import { ref, onMounted, computed } from 'vue';\r\n  import { ElCard, ElTable, ElTableColumn } from 'element-plus';\r\n  import { useRouter } from 'vue-router';\r\n  \r\n  // 1. 定义交易记录接口\r\n  interface Transaction {\r\n    tran_id: string;\r\n    card_no1: string;\r\n    card_no2?: string; // 可选字段\r\n    atm_id?: string;   // 可选字段\r\n    status: '0' | '1' | '2'; // 使用字面量类型\r\n    money: number;\r\n    tran_time: string;\r\n  }\r\n  \r\n  // 2. 定义模拟 API 响应数据，应用类型接口\r\n  const mockApiResponse = ref<{\r\n    code: number;\r\n    msg: string;\r\n    data: Transaction[];\r\n  }>({\r\n    code: 200, // 响应代码，200表示成功\r\n    msg: '查询成功', // 响应消息，描述请求的结果\r\n    data: [\r\n      {\r\n        tran_id: 'TR001',\r\n        card_no1: '**** **** **** 1234',\r\n        card_no2: '',\r\n        atm_id: 'ATM001',\r\n        status: '0',\r\n        money: 500.0,\r\n        tran_time: '2024-11-11T16:30:00Z',\r\n      },\r\n      {\r\n        tran_id: 'TR002',\r\n        card_no1: '**** **** **** 8901',\r\n        card_no2: '**** **** **** 2345',\r\n        atm_id: '',\r\n        status: '2',\r\n        money: 200.0,\r\n        tran_time: '2024-11-10T14:45:00Z', // 修正后的时间\r\n      },\r\n      {\r\n        tran_id: 'TR003',\r\n        card_no1: '**** **** **** 3456',\r\n        card_no2: '',\r\n        atm_id: 'ATM002',\r\n        status: '1',\r\n        money: 1000.0,\r\n        tran_time: '2024-11-09T10:15:00Z',\r\n      },\r\n    ],\r\n  });\r\n  \r\n  // 3. 定义交易数据，应用类型接口\r\n  const transactions = ref<Transaction[]>([]);\r\n  \r\n  // 4. 状态映射\r\n  const statusMap: Record<Transaction['status'], string> = {\r\n    '0': '存款',\r\n    '1': '取款',\r\n    '2': '转账',\r\n  };\r\n  \r\n  // 5. 判断是否存在 `card_no2` 字段用于展示\r\n  const hasCardNo2 = computed(() => {\r\n    return mockApiResponse.value.data.some((tran) => !!tran.card_no2);\r\n  });\r\n  \r\n  // 6. 判断是否存在 `atm_id` 字段用于展示\r\n  const hasATMId = computed(() => {\r\n    return mockApiResponse.value.data.some((tran) => !!tran.atm_id);\r\n  });\r\n  \r\n  // 7. 获取交易类型对应的金额颜色\r\n  function getMoneyColor(status: Transaction['status']): string {\r\n    switch (status) {\r\n      case '0': // 存款\r\n        return 'green';\r\n      case '1': // 取款\r\n        return 'red';\r\n      case '2': // 转账\r\n        return 'blue';\r\n      default:\r\n        return 'black';\r\n    }\r\n  }\r\n  \r\n  // 8. 格式化日期\r\n  function formatDate(isoString: string): string {\r\n    const date = new Date(isoString);\r\n    return date.toLocaleString();\r\n  }\r\n  \r\n  // 9. 修改 fetchTransactions 函数的返回类型\r\n  function fetchTransactions(): Promise<Transaction[]> {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        if (mockApiResponse.value.code === 200) {\r\n          resolve(mockApiResponse.value.data);\r\n        } else {\r\n          resolve([]);\r\n        }\r\n      }, 500); // 模拟网络延迟\r\n    });\r\n  }\r\n  \r\n  // 10. 在组件挂载时获取交易数据\r\n  onMounted(async () => {\r\n    transactions.value = await fetchTransactions();\r\n  });\r\n\r\n  const router = useRouter();\r\n\r\n    // 回到主菜单\r\n    function backToMenu() {\r\n    router.push('/atm/mainatm/mainmenu');\r\n  }\r\n  </script>\r\n\r\n\r\n\r\n  <style scoped>\r\n\r\n\r\n\r\n\r\n\r\n\r\n.transaction-history {\r\n  display: flex;\r\n  justify-content: center;\r\n  min-height: 100vh;\r\n  padding: 20px;\r\n}\r\n\r\n.content-container {\r\n  width: 90%;\r\n  max-width: 1200px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 20px;\r\n}\r\n\r\n.button-container {\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  margin-top: 20px;\r\n}\r\n\r\n.box-card {\r\n  width: 100%;\r\n}\r\n\r\n.card-header {\r\n  display: flex;\r\n  justify-content: center;\r\n  font-size: 18px;\r\n  font-weight: bold;\r\n}\r\n  </style>\r\n  "
        },
        {
            "path": "src\\views\\ATM\\TransferPage.vue",
            "type": "file",
            "content": "<!-- src/views/TransferPage.vue -->\r\n<template>\r\n    <div class=\"transfer-page\">\r\n      <DisplayScreen title=\"转账\" :message=\"transferInfo\" />\r\n      <NumericKeypad @input=\"addAmount\" @clear=\"clearAmount\" />\r\n      <el-input\r\n        v-model=\"recipient\"\r\n        placeholder=\"请输入收款人账号\"\r\n        style=\"width: 300px; margin-top: 20px;\"\r\n      />\r\n      <div style=\"display: flex; align-items: center; gap: 10px;\">\r\n        <el-button\r\n        type=\"success\"\r\n        @click=\"confirmTransfer\"\r\n        :disabled=\"!isValidTransfer\"\r\n        size=\"large\"\r\n        style=\"margin-top: 20px;\"\r\n        >\r\n          确认转账\r\n        </el-button>\r\n        <el-button \r\n          type=\"primary\" \r\n          @click=\"backToMenu\" \r\n          size=\"large\"\r\n          style=\"margin-top: 20px;\"\r\n          >\r\n          返回主菜单\r\n        </el-button>\r\n      </div>\r\n      <el-alert\r\n        v-if=\"error\"\r\n        title=\"转账失败，请重试\"\r\n        type=\"error\"\r\n        show-icon\r\n        closable\r\n        @close=\"error = false\"\r\n        style=\"margin-top: 10px;\"\r\n      />\r\n    </div>\r\n  </template>\r\n  \r\n  <script lang=\"ts\" setup>\r\n  import { ref, computed } from 'vue';\r\n  import { useRouter } from 'vue-router';\r\n  import { useATMStore } from '@/stores/atm';\r\n  import DisplayScreen from '@/components/DisplayScreen.vue';\r\n  import NumericKeypad from '@/components/NumericKeypad.vue';\r\n  import { ElButton, ElInput, ElAlert } from 'element-plus';\r\n  \r\n  const router = useRouter();\r\n  const userStore = useATMStore();\r\n  \r\n  const amount = ref<string>('');\r\n  const recipient = ref<string>('');\r\n  const error = ref<boolean>(false);\r\n  \r\n  const transferInfo = computed(() => {\r\n    return amount.value\r\n      ? `转账金额: ¥${amount.value}`\r\n      : '请输入转账金额';\r\n  });\r\n  \r\n  const isValidTransfer = computed(() => {\r\n    const num = parseInt(amount.value, 10);\r\n    return (\r\n      !isNaN(num) &&\r\n      num > 0 &&\r\n      num <= userStore.selectedCard.balance &&\r\n      recipient.value.length > 0\r\n    );\r\n  });\r\n  function backToMenu() {\r\n    router.push('/atm/mainatm/mainmenu');\r\n  }\r\n  function addAmount(key: string) {\r\n    if (amount.value.length < 6 && /^\\d+$/.test(amount.value + key)) {\r\n      amount.value += key;\r\n    }\r\n  }\r\n  \r\n  function clearAmount() {\r\n    amount.value = '';\r\n    error.value = false;\r\n  }\r\n  \r\n  function confirmTransfer() {\r\n    const transferAmount = parseInt(amount.value, 10);\r\n    // 这里应调用后端 API 进行转账操作\r\n    // 模拟转账成功\r\n    try {\r\n      userStore.deductBalance(transferAmount);\r\n      // 可以在这里调用后端 API 进行实际的转账操作\r\n      router.push({\r\n        name: 'TransactionReceipt',\r\n        params: {\r\n          type: 'transfer',\r\n          amount: transferAmount.toString(),\r\n          recipient: recipient.value,\r\n        },\r\n      });\r\n    } catch (e) {\r\n      error.value = true;\r\n    }\r\n  }\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .transfer-page {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    height: 100vh;\r\n  }\r\n  </style>\r\n  "
        },
        {
            "path": "src\\views\\ATM\\WelcomePage.vue",
            "type": "file",
            "content": "<template>\r\n    <div class=\"welcome-page\">\r\n      <DisplayScreen title=\"欢迎使用 AMT机\" message=\"请选择您的银行卡\" />\r\n      <el-select v-model=\"selectedCard\" placeholder=\"选择银行卡\" @change=\"onCardSelect\" style=\"width: 300px; margin-top: 20px;\">\r\n        <el-option\r\n          v-for=\"card in cards\"\r\n          :key=\"card.cardNumber\"\r\n          :label=\"card.cardNumber\"\r\n          :value=\"card\"\r\n        />\r\n      </el-select>\r\n      <el-button type=\"primary\" @click=\"proceedToPin\" size=\"large\" :disabled=\"!selectedCard\">\r\n        确定\r\n      </el-button>\r\n    </div>\r\n  </template>\r\n  \r\n  <script lang=\"ts\" setup>\r\n  import { ref } from 'vue';\r\n  import { useRouter } from 'vue-router';\r\n  import { useATMStore } from '@/stores/atm';\r\n  \r\n  import DisplayScreen from '@/components/DisplayScreen.vue';\r\n  const userStore = useATMStore();\r\n  \r\n  const router = useRouter();\r\n  const selectedCard = ref(null);\r\n  \r\n  // 模拟的数据库中的银行卡数据\r\n  const cards = ref([\r\n    { cardNumber: '1234 5678 9012 3456', balance: 10000 },\r\n    { cardNumber: '2345 6789 0123 4567', balance: 5000 },\r\n    { cardNumber: '3456 7890 1234 5678', balance: 2000 }\r\n  ]);\r\n  \r\n  function onCardSelect(card) {\r\n    // 保存选中的银行卡信息到状态管理\r\n    userStore.selectCard(card);\r\n  }\r\n  \r\n  function proceedToPin() {\r\n    // 进入 PIN 输入页\r\n    router.push('/atm/pin-entry');\r\n  }\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .welcome-page {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    height: 100vh;\r\n  }\r\n  .el-button {\r\n    margin-top: 20px;\r\n  }\r\n  </style>\r\n  "
        },
        {
            "path": "src\\views\\ATM\\Withdrawal.vue",
            "type": "file",
            "content": "<!-- src/views/Withdrawal.vue -->\r\n<template>\r\n    <div class=\"withdrawal\">\r\n      <DisplayScreen title=\"取款金额\" :message=\"amount || '请输入取款金额'\" />\r\n      <NumericKeypad @input=\"addAmount\" @clear=\"clearAmount\" />\r\n      <div style=\"display: flex; align-items: center; gap: 10px;\">\r\n        <el-button\r\n          type=\"success\"\r\n          @click=\"confirmWithdrawal\"\r\n          :disabled=\"!isValidAmount\"\r\n          size=\"large\"\r\n          style=\"margin-top: 20px;\"\r\n        >\r\n          确认取款\r\n        </el-button>\r\n        <el-button \r\n          type=\"primary\" \r\n          @click=\"backToMenu\" \r\n          size=\"large\"\r\n          style=\"margin-top: 20px;\"\r\n          >\r\n          返回主菜单\r\n        </el-button>\r\n      </div>\r\n      <el-alert\r\n        v-if=\"error\"\r\n        title=\"余额不足或输入金额有误\"\r\n        type=\"error\"\r\n        show-icon\r\n        closable\r\n        @close=\"error = false\"\r\n        style=\"margin-top: 10px;\"\r\n      />\r\n    </div>\r\n  </template>\r\n  \r\n  <script lang=\"ts\" setup>\r\n  import { ref, computed } from 'vue';\r\n  import { useRouter } from 'vue-router';\r\n  import { useATMStore } from '@/stores/atm';\r\n  import DisplayScreen from '@/components/DisplayScreen.vue';\r\n  import NumericKeypad from '@/components/NumericKeypad.vue';\r\n  import { ElButton, ElAlert } from 'element-plus';\r\n  \r\n  const router = useRouter();\r\n  const userStore = useATMStore();\r\n  \r\n  const amount = ref<string>('');\r\n  const error = ref<boolean>(false);\r\n  \r\n  const isValidAmount = computed(() => {\r\n  const num = parseInt(amount.value, 10);\r\n  return !isNaN(num) && num > 0 && num <= userStore.selectedCard.balance;\r\n});\r\n\r\n  \r\n  function backToMenu() {\r\n    router.push('/atm/mainatm/mainmenu');\r\n  }\r\n  function addAmount(key: string) {\r\n    if (amount.value.length < 6 && /^\\d+$/.test(amount.value + key)) {\r\n      amount.value += key;\r\n    }\r\n  }\r\n  \r\n  function clearAmount() {\r\n    amount.value = '';\r\n    error.value = false;\r\n  }\r\n  \r\n  function confirmWithdrawal() {\r\n    const withdrawalAmount = parseInt(amount.value, 10);\r\n    try {\r\n      userStore.deductBalance(withdrawalAmount);\r\n      router.push({\r\n        name: 'TransactionReceipt',\r\n        params: { type: 'withdrawal', amount: withdrawalAmount.toString() },\r\n      });\r\n    } catch (e) {\r\n      error.value = true;\r\n    }\r\n  }\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .withdrawal {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    height: 100vh;\r\n  }\r\n  </style>\r\n  "
        },
        {
            "path": "src\\views\\ATM",
            "type": "directory"
        },
        {
            "path": "src\\views\\BankOnline\\Dashboard.vue",
            "type": "file",
            "content": "[非文本文件内容未包含]"
        },
        {
            "path": "src\\views\\BankOnline\\LoginPage.vue",
            "type": "file",
            "content": "[非文本文件内容未包含]"
        },
        {
            "path": "src\\views\\BankOnline\\MainBankOnline.vue",
            "type": "file",
            "content": "[非文本文件内容未包含]"
        },
        {
            "path": "src\\views\\BankOnline\\Settings.vue",
            "type": "file",
            "content": "[非文本文件内容未包含]"
        },
        {
            "path": "src\\views\\BankOnline\\Transactions.vue",
            "type": "file",
            "content": "[非文本文件内容未包含]"
        },
        {
            "path": "src\\views\\BankOnline",
            "type": "directory"
        }
    ],
    "skipped_directories": [
        ".\\node_modules"
    ],
    "skipped_files": [
        ".\\.gitignore",
        ".\\package-lock.json"
    ]
}